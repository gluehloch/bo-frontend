import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { PartyComponent } from './party.component';
import { PartyService } from './party.service';
import { NavigationRouterService } from '../navigationrouter.service';
import { of } from 'rxjs';

describe('PartyComponent', () => {
    let component: PartyComponent;
    let fixture: ComponentFixture<PartyComponent>;
    let partyServiceSpy: jasmine.SpyObj<PartyService>;
    let navigationRouterServiceSpy: jasmine.SpyObj<NavigationRouterService>;

    beforeEach(async(() => {
        partyServiceSpy = jasmine.createSpyObj('PartyService', ['findParties', 'addParty']);
        navigationRouterServiceSpy = jasmine.createSpyObj('NavigationRouterService', ['activate']);

        TestBed.configureTestingModule({
            imports: [RouterTestingModule],
            declarations: [PartyComponent],
            providers: [
            { provide: PartyService, useValue: partyServiceSpy },
            { provide: NavigationRouterService, useValue: navigationRouterServiceSpy }
            ]
        }).compileComponents();
    }));

    beforeEach(() => {
        fixture = TestBed.createComponent(PartyComponent);
        component = fixture.componentInstance;
    });

    it('should create', () => {
        expect(component).toBeTruthy();
    });

    it('should sort parties by nickname', () => {
        component.partiesModel = [
            { id: 1, nickname: 'Charlie', name: '', surname: '', mail: '', phone: '', password: '', title: '' },
            { id: 2, nickname: 'Alice', name: '', surname: '', mail: '', phone: '', password: '', title: '' },
            { id: 3, nickname: 'Bob', name: '', surname: '', mail: '', phone: '', password: '', title: '' }
        ];

        component.ngOnInit();

        expect(component.partiesModel).toEqual([
            { id: 2, nickname: 'Alice', name: '', surname: '', mail: '', phone: '', password: '', title: '' },
            { id: 3, nickname: 'Bob', name: '', surname: '', mail: '', phone: '', password: '', title: '' },
            { id: 1, nickname: 'Charlie', name: '', surname: '', mail: '', phone: '', password: '', title: '' }
        ]);
    });

    it('should navigate to update party', () => {
        const party: Rest.PartyJson = { id: 1, nickname: 'Charlie', name: '', surname: '', mail: '', phone: '', password: '', title: '' };
        component.updateParty(party);
        expect(component['router'].navigate).toHaveBeenCalledWith(['./chiefop/party/update', party.id]);
    });

    it('should add party', () => {
        const party: Rest.PartyJson = { id: 1, nickname: 'Charlie', name: '', surname: '', mail: '', phone: '', password: '', title: '' };
        partyServiceSpy.addParty.and.returnValue(of(party));

        component.addParty(party);

        expect(partyServiceSpy.addParty).toHaveBeenCalledWith(party);
        expect(component.partiesModel).toEqual([party]);
        expect(component.sortParties).toHaveBeenCalled();
    });

    it('should find parties on init', () => {
        const parties = [
            { id: 1, nickname: 'Charlie' },
            { id: 2, nickname: 'Alice' },
            { id: 3, nickname: 'Bob' }
        ];
        partyServiceSpy.findParties.and.returnValue(of(parties));

        component.ngOnInit();

        expect(partyServiceSpy.findParties).toHaveBeenCalled();
        expect(component.partiesModel).toEqual(parties);
        expect(navigationRouterServiceSpy.activate).toHaveBeenCalledWith(NavigationRouterService.ROUTE_ADMIN_MENU);
    });
});